// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2019 01:04:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab4b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab4b_vlg_sample_tst(
	A_Mux,
	ALU_OP,
	B_Mux,
	CLK,
	CLR_A,
	CLR_B,
	CLR_IR,
	CLR_PC,
	DATA_MUX,
	EN,
	IM_MUX1,
	IM_MUX2,
	INC_PC,
	LD_A,
	LD_B,
	LD_IR,
	LD_PC,
	MEM_CLK,
	Rg_Mux,
	WEN,
	sampler_tx
);
input  A_Mux;
input [2:0] ALU_OP;
input  B_Mux;
input  CLK;
input  CLR_A;
input  CLR_B;
input  CLR_IR;
input  CLR_PC;
input [1:0] DATA_MUX;
input  EN;
input  IM_MUX1;
input [1:0] IM_MUX2;
input  INC_PC;
input  LD_A;
input  LD_B;
input  LD_IR;
input  LD_PC;
input  MEM_CLK;
input  Rg_Mux;
input  WEN;
output sampler_tx;

reg sample;
time current_time;
always @(A_Mux or ALU_OP or B_Mux or CLK or CLR_A or CLR_B or CLR_IR or CLR_PC or DATA_MUX or EN or IM_MUX1 or IM_MUX2 or INC_PC or LD_A or LD_B or LD_IR or LD_PC or MEM_CLK or Rg_Mux or WEN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab4b_vlg_check_tst (
	CarryOut,
	Zero,
	sampler_rx
);
input  CarryOut;
input  Zero;
input sampler_rx;

reg  CarryOut_expected;
reg  Zero_expected;

reg  CarryOut_prev;
reg  Zero_prev;

reg  CarryOut_expected_prev;
reg  Zero_expected_prev;

reg  last_CarryOut_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	CarryOut_prev = CarryOut;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	CarryOut_expected_prev = CarryOut_expected;
	Zero_expected_prev = Zero_expected;
end



// expected CarryOut
initial
begin
	CarryOut_expected = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
end 
// generate trigger
always @(CarryOut_expected or CarryOut or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CarryOut = %b | expected Zero = %b | ",CarryOut_expected_prev,Zero_expected_prev);
	$display("| real CarryOut = %b | real Zero = %b | ",CarryOut_prev,Zero_prev);
`endif
	if (
		( CarryOut_expected_prev !== 1'bx ) && ( CarryOut_prev !== CarryOut_expected_prev )
		&& ((CarryOut_expected_prev !== last_CarryOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CarryOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CarryOut_expected_prev);
		$display ("     Real value = %b", CarryOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CarryOut_exp = CarryOut_expected_prev;
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab4b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_Mux;
reg [2:0] ALU_OP;
reg B_Mux;
reg CLK;
reg CLR_A;
reg CLR_B;
reg CLR_IR;
reg CLR_PC;
reg [1:0] DATA_MUX;
reg EN;
reg IM_MUX1;
reg [1:0] IM_MUX2;
reg INC_PC;
reg LD_A;
reg LD_B;
reg LD_IR;
reg LD_PC;
reg MEM_CLK;
reg Rg_Mux;
reg WEN;
// wires                                               
wire CarryOut;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
lab4b i1 (
// port map - connection between master ports and signals/registers   
	.A_Mux(A_Mux),
	.ALU_OP(ALU_OP),
	.B_Mux(B_Mux),
	.CarryOut(CarryOut),
	.CLK(CLK),
	.CLR_A(CLR_A),
	.CLR_B(CLR_B),
	.CLR_IR(CLR_IR),
	.CLR_PC(CLR_PC),
	.DATA_MUX(DATA_MUX),
	.EN(EN),
	.IM_MUX1(IM_MUX1),
	.IM_MUX2(IM_MUX2),
	.INC_PC(INC_PC),
	.LD_A(LD_A),
	.LD_B(LD_B),
	.LD_IR(LD_IR),
	.LD_PC(LD_PC),
	.MEM_CLK(MEM_CLK),
	.Rg_Mux(Rg_Mux),
	.WEN(WEN),
	.Zero(Zero)
);

// CLK
initial
begin
	repeat(12)
	begin
		CLK = 1'b0;
		CLK = #20000 1'b1;
		# 20000;
	end
	CLK = 1'b0;
end 

// MEM_CLK
always
begin
	MEM_CLK = 1'b0;
	MEM_CLK = #10000 1'b1;
	#10000;
end 

// A_Mux
initial
begin
	A_Mux = 1'b0;
end 

// B_Mux
initial
begin
	B_Mux = 1'b0;
end 

// LD_A
initial
begin
	LD_A = 1'b1;
end 

// LD_B
initial
begin
	LD_B = 1'b1;
end 

// CLR_A
initial
begin
	CLR_A = 1'b0;
end 

// CLR_B
initial
begin
	CLR_B = 1'b0;
end 
// ALU_OP[ 2 ]
initial
begin
	ALU_OP[2] = 1'b0;
end 
// ALU_OP[ 1 ]
initial
begin
	ALU_OP[1] = 1'b0;
end 
// ALU_OP[ 0 ]
initial
begin
	ALU_OP[0] = 1'b0;
end 

// LD_IR
initial
begin
	LD_IR = 1'b1;
end 

// LD_PC
initial
begin
	LD_PC = 1'b1;
end 

// CLR_PC
initial
begin
	CLR_PC = 1'b0;
end 
// DATA_MUX[ 1 ]
initial
begin
	DATA_MUX[1] = 1'b0;
end 
// DATA_MUX[ 0 ]
initial
begin
	DATA_MUX[0] = 1'b0;
end 

// EN
initial
begin
	EN = 1'b0;
end 

// IM_MUX1
initial
begin
	IM_MUX1 = 1'b0;
end 
// IM_MUX2[ 1 ]
initial
begin
	IM_MUX2[1] = 1'b0;
end 
// IM_MUX2[ 0 ]
initial
begin
	IM_MUX2[0] = 1'b0;
end 

// INC_PC
initial
begin
	INC_PC = 1'b0;
end 

// Rg_Mux
initial
begin
	Rg_Mux = 1'b0;
end 

// WEN
initial
begin
	WEN = 1'b0;
end 

// CLR_IR
initial
begin
	CLR_IR = 1'b0;
end 

lab4b_vlg_sample_tst tb_sample (
	.A_Mux(A_Mux),
	.ALU_OP(ALU_OP),
	.B_Mux(B_Mux),
	.CLK(CLK),
	.CLR_A(CLR_A),
	.CLR_B(CLR_B),
	.CLR_IR(CLR_IR),
	.CLR_PC(CLR_PC),
	.DATA_MUX(DATA_MUX),
	.EN(EN),
	.IM_MUX1(IM_MUX1),
	.IM_MUX2(IM_MUX2),
	.INC_PC(INC_PC),
	.LD_A(LD_A),
	.LD_B(LD_B),
	.LD_IR(LD_IR),
	.LD_PC(LD_PC),
	.MEM_CLK(MEM_CLK),
	.Rg_Mux(Rg_Mux),
	.WEN(WEN),
	.sampler_tx(sampler)
);

lab4b_vlg_check_tst tb_out(
	.CarryOut(CarryOut),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

