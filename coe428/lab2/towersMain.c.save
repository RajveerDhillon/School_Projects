#include <stdlib.h>
#include "towers.h"

int main(int argc, char **argv)
{
    int n = 3;
    int from = 1;
    int dest = 2;
    if (argc > 1) {
        n = atoi(argv[1]);
    }
    towers(n, from, dest);
    exit(0);
}

towers(3, 1, 2)
..towers(2, 1, 3)
....towers(1, 1, 2)
......towers(0, 1, 3)
......Move #1: From Tower 1 to Tower 2
......towers(0, 3, 2)
....Move #2: From Tower 1 to Tower 3
....towers(1, 2, 3)
......towers(0, 2, 1)
......Move #3: From Tower 2 to Tower 3
......towers(0, 1, 3)
..Move #4: From Tower 1 to Tower 2
..towers(2, 3, 2)
....towers(1, 3, 1)
......towers(0, 3, 2)
......Move #5: From Tower 3 to Tower 1
......towers(0, 2, 1)
....Move #6: From Tower 3 to Tower 2
....towers(1, 1, 2)
......towers(0, 1, 3)
......Move #7: From Tower 1 to Tower 2
......towers(0, 3, 2)
/* Author: kclowes */
/* Description: Solves "Towers of Hanoi" problem.
 *              Prints sequence of moves to stdout.
 *              Prints other information tracing the
 *              algorithm's progress to stderr.
 */
#include <stdio.h>
#include "towers.h"

static void showRecursionDepth(void);
static unsigned int depth = 0;
static unsigned int moveNumber = 0;

void towers(unsigned int n, unsigned int from, unsigned int dest)
{
    unsigned int spare = 6 - from - dest;
    showRecursionDepth();
    fprintf(stderr, "towers(%d, %d, %d)\n", n, from, dest);
    depth++;
    if (n != 0) {
        towers(n-1, from, spare);
        showRecursionDepth();
        fprintf(stderr, "Move #%d: From Tower %d to Tower %d\n", ++moveNumber, from, dest);
        printf("%d %d\n", from, dest);
        towers(n-1, spare, dest);
    }
    depth--;
}

static void showRecursionDepth()
{
    int i;
    for(i = 0; i < depth; i++)
        fprintf(stderr, "..");
}
#include <stdlib.h>
#include "towers.h"

int main(int argc, char **argv)
/* Author: kclowes */
/* Description: Solves "Towers of Hanoi" problem.
 *              Prints sequence of moves to stdout.
 *              Prints other information tracing the
 *              algorithm's progress to stderr.
 */
#include <stdio.h>
#include "towers.h"

static towers(3, 1, 2)
..towers(2, 1, 3)
....towers(1, 1, 2)
......towers(0, 1, 3)
......Move #1: From Tower 1 to Tower 2
......towers(0, 3, 2)
....Move #2: From Tower 1 to Tower 3
....towers(1, 2, 3)
......towers(0, 2, 1)
......Move #3: From Tower 2 to Tower 3
......towers(0, 1, 3)
..Move #4: From Tower 1 to Tower 2
..towers(2, 3, 2)
....towers(1, 3, 1)
......towers(0, 3, 2)
......Move #5: From Tower 3 to Tower 1
......towers(0, 2, 1)
....Move #6: From Tower 3 to Tower 2
....towers(1, 1, 2)
......towers(0, 1, 3)
......Move #7: From Tower 1 to Tower 2
......towers(0, 3, 2)
void showRecursionDepth(void);
static unsigned int depth = 0;
static unsigned int moveNumber = 0;

void towers(unsigned int n, unsigned int from, unsigned int dest)
{
    unsigned int spare = 6 - from - dest;
    showRecursionDepth();
    fprintf(stderr, "towers(%d, %d, %d)\n", n, from, dest);
    depth++;
    if (n != 0) {
        towers(n-1, from, spare);
        showRecursionDepth();
        fprintf(stderr, "Move #%d: From Tower %d to Tower %d\n", ++moveNumber, from, dest);
        printf("%d %d\n", from, dest);
        towers(n-1, spare, dest);
    }
    depth--;
}

static void showRecursionDepth()
{
    int i;
    for(i = 0; i < depth; i++)
        fprintf(stderr, "..");
}
{
    int n = 3;
    int from = 1;
    int dest = 2;
    if (argc > 1) {
        n = atoi(argv[1]);
    }
    towers(n, from, dest);
    exit(0);
}

towers(3, 1, 2)
..towers(2, 1, 3)
....towers(1, 1, 2)
......towers(0, 1, 3)
......Move #1: From Tower 1 to Tower 2
......towers(0, 3, 2)
....Move #2: From Tower 1 to Tower 3
....towers(1, 2, 3)
......towers(0, 2, 1)
......Move #3: From Tower 2 to Tower 3
......towers(0, 1, 3)
..Move #4: From Tower 1 to Tower 2
..towers(2, 3, 2)
....towers(1, 3, 1)
......towers(0, 3, 2)
......Move #5: From Tower 3 to Tower 1
......towers(0, 2, 1)
....Move #6: From Tower 3 to Tower 2
....towers(1, 1, 2)
......towers(0, 1, 3)
......Move #7: From Tower 1 to Tower 2
......towers(0, 3, 2)
